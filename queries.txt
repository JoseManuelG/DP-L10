01 -A listing with the number of chorbies per country and city.
select count(c), c.coordinates.country from Chorbi c group by c.coordinates.country; 
select count(c), c.coordinates.city from Chorbi c group by c.coordinates.city;

02 -The minimum, the maximum, and the average ages of the chorbies.
minimo: select min(DATEDIFF(CURRENT_DATE, c.birthDate)/365.256363004) from Chorbi c; //Sacar como integer
maximo: select max(DATEDIFF(CURRENT_DATE, c.birthDate)/365.256363004) from Chorbi c; //Sacar como integer
avg:	select avg(DATEDIFF(CURRENT_DATE, c.birthDate)/365.256363004) from Chorbi c;	

03 -The ratio of chorbies who have not registered a credit card or have registered an invalid credit card.
select count(c) from CreditCard c where c.expirationYear >= YEAR(CURRENT_DATE) and c.expirationMonth >= MONTH(CURRENT_DATE);
select count(c) from Chorbi c; // dividir en java
//HACER EN SERVICIO 1 - (PRIMER COUNT / SEGUNDO COUNT)

04 -The ratios of chorbies who search for “activities”, “friendship”, and “love”.
select count(c) from Chorbi c where c.desiredRelationship='activities';
select count(c) from Chorbi c where c.desiredRelationship='friendship';
select count(c) from Chorbi c where c.desiredRelationship='love';

05 -The list of chorbies, sorted by the number of likes they have got.
select c from Likes l, Chorbi c where c=l.liked group by c order by count(c) desc;
//habria que añadirle los chorbies que no estan en ningun likes que te los da la siguiente query
select c from Chorbi c where c not in (select distinct l.liked from Likes l);

06 -The minimum, the maximum, and the average number of likes per chorbi.
//COMPROBAR QUE EXISTEN CHORBIES

minimo: select count(l.liked) from Likes l group by l.liked order by count(l.liked) asc;
//se hace un count de chorbies y si es mayor que el size de la query de arriba, el minimo es 0, si no es el primer elemento que devuelve

maximo: select count(l.liked) from Likes l group by l.liked order by count(l.liked) desc;
//el maximo es el primer elemento que devuelve

avg: count de likes entre count de chorbies

07 -The minimum, the maximum, and the average number of chirps that a chorbi receives from other chorbies.

avg:	select count(m) from Chirp m where m.isSender=false and m.recipient is not null;

	dividido entre	count de chorbi

min:	select count(m) from Chirp m where m.isSender=false and m.recipient is not null group by m.recipient.id order by count(m) asc;

	y quedarse con el primero

max:	select count(m) from Chirp m where m.isSender=false and m.recipient is not null group by m.recipient.id order by count(m) desc;

	y quedarse con el primero

08 -The minimum, the maximum, and the average number of chirps that a chorbi sends to other chorbies.

avg:	select count(m) from Chirp m where m.isSender=true and m.sender is not null

	dividido entre	count de chorbi

min:	select count(m) from Chirp m where m.isSender=true and m.sender is not null group by m.sender.id order by count(m) asc;

	y quedarse con el primero

max:	select count(m) from Chirp m where m.isSender=true and m.sender is not null group by m.sender.id order by count(m) desc;

	y quedarse con el primero


09 -The chorbies who have got more chirps.

select m.recipient from Chirp m where m.isSender=false and m.recipient is not null group by m.recipient having count(m)=?1 order by count(m) desc;
//donde ?1 es el maximo de chirp recibidos de un actor (query resulta en un apartado arriba)

10 -The chorbies who have sent more chirps.

select m.sender from Chirp m where m.isSender=true and m.sender is not null group by m.sender having count(m)=?1 order by count(m) desc;
//donde ?1 es el maximo de chirp enviados de un actor (query resulta en un apartado arriba)

